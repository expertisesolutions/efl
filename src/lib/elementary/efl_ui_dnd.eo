import eina_types;

struct Efl.Ui.Dnd_Event {
   [[Information sent along Drag & Drop events.]]
   position : Eina.Position2D; [[The position where the drop event occurred, in window coordinates.]]
   seat : uint; [[Which seat triggered the event.]]
   available_types : accessor<string>; [[Types with automatic conversion available. Use one of them in the call to
                                         @Efl.Ui.Dnd.drop_data_get.

                                         Types are IANA MIME types:
                                         https://www.iana.org/assignments/media-types/media-types.xhtml
                                       ]]
}

struct Efl.Ui.Dnd_Drop_Event {
   [[Information sent along Drop events.]]
   dnd : Efl.Ui.Dnd_Event; [[Common information.]]
   action : string; [[Requested action to perform upon reception of this data.]]
}

mixin @beta Efl.Ui.Dnd requires Efl.Object {
   [[This mixin provides the ability to interact with the system's Drag & Drop facilities.
   
     Applications starting a Drag & Drop operation operation are said to perform a "Drag" and use
     the methods prefixed "drag_".
     On the other hand, applications receiving dragged content are said to perform a "Drop" operation and use
     the methods prefixed "drop_".
   ]]
   methods {
      drag_start {
         [[Starts a drag from this client.

           @[Efl.Ui.Dnd.drag,start] is emitted each time a successful drag is started.
           @[Efl.Ui.Dnd.drag,finished] is emitted every time a drag is finished.
         ]]
         params {
            content : Eina.Content @by_ref; [[The content being dragged.]]
            @in action: string; [[Requested action to perform by the receiver once content is transferred.]]
            @in seat: uint; [[Seat starting the drag operation. When in doubt use 0.]]
         }
         return : Efl.Content; [[An Efl.Ui element which you can use to render a visual representation
                                 of the content being dragged (like a thumbnail, for example).
                                 Use @Efl.Content.content.set on it to do so.]]
      }
      drag_cancel {
         [[Cancels an on-going drag operation.]]
         params {
            @in seat: uint; [[Seat that started the drag operation. When in doubt use 0.]]
         }
      }
      drop_data_get {
         [[Retrieves the dropped data.]]
         params {
            @in seat: uint; [[Seat that started the drag operation. When in doubt use 0.]]
            @in acceptable_types : iterator<string>; [[List of strings describing the type of content the application
                                                       can accept. Types are IANA MIME types:
                                                       https://www.iana.org/assignments/media-types/media-types.xhtml.]]
         }
         return : future<Eina.Content> @move; [[This future is fulfilled when the content is received (asynchronously)
                                                and ready to use.
                                                The Eina.Content specifies the type of the data.
                                                If no matching type was found it returns an error.
                                              ]]
      }
   }
   events {
      drop,enter : Efl.Ui.Dnd_Event; [[Dragged content entered the window. Its type can already be checked with
                                       @.drop_data_get to react before it is dropped, for example.]]
      drop,leave : Efl.Ui.Dnd_Event; [[Dragged content left the window.]]
      drop,pos : Efl.Ui.Dnd_Event;   [[Dragged content moved over the window. Its type can already be checked with
                                       @.drop_data_get to react before it is dropped, for example.]]
      drop,drop : Efl.Ui.Dnd_Drop_Event;  [[Dragged content was dropped over the window.]]
      drag,start : void;    [[A Drag operation started.]]
      drag,finished : bool; [[A Drag operation finished. The boolean in the event information is $true if the
                              operation completed with a Drop, or $false if it was cancelled.]]
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.invalidate;
      Efl.Object.finalize;
   }
}
