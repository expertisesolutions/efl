name: EFL on Windows

on:
  push:
    branches: 
      - devs/joaoantoniocardoso/workspace

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
### ENV
    - name: add python scripts to path
      run: |
        $python_version = (py -3 --version).replace("Python ", "")
        $python_scripts_path = ($(echo C:\hostedtoolcache\windows\Python\$python_version\x64\Scripts ) -join "")
        echo "::add-path::$python_scripts_path"
### CACHE ALL AT ONCE
    - name: Cache All
      uses: actions/cache@v2.0.0
      id: cache-all
      env:
        cache-name: cache-all
      with:
        path: |
          "C:\\Program Files\\Nasm"
          "C:\\Program Files\\LLVM"
          "C:\\Users\\runneradmin\\AppData\\local\\pip\\cache"
          "C:\\hostedtoolcache\\windows\\python\\$python_version\\x64\\lib\\site-packages"
          openssl
          win32-deps
          subprojects
          build
        key: cache-all
        restore-keys: cache-all
### NASM
    - name: install nasm
      if: steps.cache-all.outputs.cache-hit != 'true'
      run: choco install nasm
    - name: Add Nasm to PATH
      run: echo "::add-path::C:\Program Files\Nasm"
    - name: Test nasm
      run: nasm -v
### LLVM
    - name: Install LLVM
      if: steps.cache-all.outputs.cache-hit != 'true'
      run: choco install llvm
    - name: Add clang-cl to PATH
      run: echo "::add-path::C:\Program Files\LLVM\bin"
#    - name: Test clang-cl
#      run: clang-cl -v 
### DEPENDENCIES WITH PIP: NINJA, MESON
    - name: "Install pip dependencies: ninja, meson"
      run: py -3 -m pip install --upgrade ninja meson 
#    - run: py -3 -m pip list -v
    - name: test ninja
      run: ninja --version
    - name: test meson
      run: meson -v
### OPENSSL
    - name: Download openssl source
      if: steps.cache-all.outputs.cache-hit != 'true'
      run: git clone -b OpenSSL_1_1_1g https://github.com/openssl/openssl
    - uses: ilammy/msvc-dev-cmd@v1
#      if: steps.cache-all.outputs.cache-hit != 'true'
      with:
        arch: x64
    - name: Configure OpenSSL
      if: steps.cache-all.outputs.cache-hit != 'true'
      run: perl Configure VC-WIN64A
      working-directory: .\openssl
    - name: Compile OpenSSL
      if: steps.cache-all.outputs.cache-hit != 'true'
      run: nmake
      working-directory: .\openssl
### CONFIGURE EFL
    - name: configure.bat
      if: steps.cache-all.outputs.cache-hit != 'true'
      run: .\configure.bat
      env:
        OPENSSL_DIR: ${{ github.workspace }}\openssl
### BUILD EFL   
    - name: build.bat
      run: .\build.bat
#    - name: Upload artifact     
#      uses: actions/upload-artifact@v1.0.0
#      with:
#        name: build
#        path: build
### TEST EFL
  tests:
    name: Tests
    runs-on: windows-latest
    needs: build
    steps:
    - name: set git line ending config
      run: git config --global core.autocrlf input
    - uses: actions/checkout@v2
### ENV
    - name: add python scripts to path
      run: |
        $python_version = (py -3 --version).replace("Python ", "")
        $python_scripts_path = ($(echo C:\hostedtoolcache\windows\Python\$python_version\x64\Scripts ) -join "")
        echo "::add-path::$python_scripts_path"
### CACHE ALL AT ONCE
    - name: Cache All
      uses: actions/cache@v2.0.0
      id: cache-all
      env:
        cache-name: cache-all
      with:
        path: |
          "C:\\Program Files\\Nasm"
          "C:\\Program Files\\LLVM"
          "C:\\Users\\runneradmin\\AppData\\local\\pip\\cache"
          openssl
          win32-deps
          subprojects
          build
        key: cache-all
        restore-keys: cache-all
### DEPENDENCIES WITH PIP: NINJA, MESON
    - name: "Install pip dependencies: ninja, meson"
      run: py -3 -m pip install --upgrade ninja meson 
#    - run: py -3 -m pip list -v
    - name: test ninja
      run: ninja --version
    - name: test meson
      run: meson -v
### TEST EFL
#    - name: Download artifact
#      uses: actions/download-artifact@v1.0.0
#      with:
#        name: build
    - name: test
      run: meson test --no-rebuild -C build --verbose
