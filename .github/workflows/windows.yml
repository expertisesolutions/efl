name: EFL on Windows

on:
  push:
  pull_request:
    branches: [ devs/expertise/native-windows ]

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    # Remove Strawberry
    # Strawberry is added by default to the PATH environmment, and it happens
    # that the Meson inconveniently preffer its packages over those installed
    # with vcpkg, so we just rename Strawberry folder so it can't be found.
    - name: Remove Strawberry
      run: mv C:\Strawberry C:\Strawberry.disabled

    # CACHE LLVM
    - name: Cache LLVM install
      uses: actions/cache@v2
      id: cache-llvm
      env:
        cache-name: cache-llvm
      with:
        path: "C:\\Program Files\\LLVM"
        key: cache-llvm
        restore-keys: cache-llvm

    # CACHE VCPKG
    - name: Cache vcpkg
      uses: actions/cache@v2
      id: cache-vcpkg
      with:
        path: ${{ github.workspace }}/vcpkg
        key: vcpkg-cache-${{ hashfiles('.github/workflows/windows.yml') }}
    - name: Show vcpkg cache info
      env:
        VCPKG_INFO: ${{ toJSON(steps.cache-vcpkg) }}
      run: echo "${VCPKG_INFO}"

    # INSTALL LLVM
    - name: Install LLVM
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: choco install llvm
    - name: Add clang-cl to PATH
      run: echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Search clang-cl
      run: clang-cl -v

    # SETUP PYTHON
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # CACHE PYTHON
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: (py -3 -m pip cache dir)
        key: cache-pip

    # INSTALL PYTHON PACKAGES
    - name: Install python dependencies
      run: py -3 -m pip install --upgrade --upgrade-strategy eager pip ninja meson
    - name: test meson
      run: meson -v
    - name: Show from where clang-cl
      run: where clang-cl

    # INSTALL VCPKG
    - name: Check if vcpkg is already installed
      if: steps.cache-vcpkg.outputs.cache-hit == 'true'
      run: .\vcpkg\vcpkg version
    - name: Clone vcpkg
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: git clone https://github.com/microsoft/vcpkg
    - name: Checkout to f4bd6423
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: git checkout f4bd6423
      working-directory: .\vcpkg
    - name: Run vcpkg bootstrap
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: .\vcpkg\bootstrap-vcpkg.bat

    # INSTALL VCPKG PACKAGES
    - name: Install vcpkg packages
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: .\vcpkg\vcpkg --triplet x64-windows install openssl freetype libjpeg-turbo lua luajit zlib check getopt curl
    - name: Add vcpkg installed package dirs to path
      run: echo "${{ github.workspace }}/vcpkg/installed/x64-windows/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Add vcpkg installed package dirs to path (debug libs)
      run: echo "${{ github.workspace }}/vcpkg/installed/x64-windows/debug/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Upgrade Cached Packages
      if: steps.cache-vcpkg.outputs.cache-hit == 'true'
      run: .\vcpkg\vcpkg --triplet x64-windows upgrade
    - name: Run vcpkg integrate install
      run: .\vcpkg\vcpkg integrate install
    # Usefull for debugging vcpkg:
#    - name: List packages
#      run: .\vcpkg\vcpkg list
#    - name: List installed packages structure
#      run: tree vcpkg\installed\x64-windows /F

    # BUILD EFL
    - name: Run VCVARS64
      shell: cmd
      run: '"C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"'
    - name: Configure
      run: meson build --native-file platforms/windows-native.txt --native-file platforms/windows-ci-custom-native-properties.txt
    # Usefull for debuggin Meson:
#    - name: Show meson config
#      run: meson configure build
#    - name: Show all meson introspect
#      run: meson introspect --all --indent build
    - name: Build
      run: meson compile -C build
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: build

  tests:
    name: Tests
    runs-on: windows-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # CACHE PIP PACKAGES
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: (py -3 -m pip cache dir)
        key: cache-pip
    - name: Install python dependencies
      run: py -3 -m pip install --upgrade --upgrade-strategy eager pip ninja meson

    # CACHE VCPKG
    - name: Cache vcpkg
      uses: actions/cache@v2
      id: cache-vcpkg
      with:
        path: ${{ github.workspace }}/vcpkg
        key: vcpkg-cache-${{ hashfiles('.github/workflows/windows.yml') }}
    - name: Show vcpkg cache info
      env:
        VCPKG_INFO: ${{ toJSON(steps.cache-vcpkg) }}
      run: echo "${VCPKG_INFO}"

    # CHECK PYTHON PACKAGES
    - name: Test ninja
      run: ninja --version
    - name: Install meson
      run: py -3 -m pip install meson
    - name: Test meson
      run: meson -v

    # GET EFL BUILT ARTIFACTS
    - name: Download build artifact
      uses: actions/download-artifact@v2
      with:
        name: build
        path: build
    - name: Check directory tree (for debugging purposes)
      run: tree .

    # SETUP VCPKG PACKAGES
    - name: Add vcpkg installed package dirs to path
      run: |
        echo "${{ github.workspace }}\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{ github.workspace }}\vcpkg\installed\x64-windows\debug\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Check installed vcpkg libs
      run: |
        dir "${{ github.workspace }}\vcpkg\installed\x64-windows\bin"
        dir "${{ github.workspace }}\vcpkg\installed\x64-windows\debug\bin"

    # SETUP BUILT EFL
    - name: Add build libs to path
      run: |
        echo "${{ github.workspace }}\build\subprojects\getopt" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        echo "${{ github.workspace }}\build\subprojects\pcre-8.37" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    - name: Check built EFL libs
      run: |
        dir "${{ github.workspace }}\build\subprojects\getopt"
        dir "${{ github.workspace }}\build\subprojects\pcre-8.37"

    # TEST EFL
    - name: Run VCVARS64
      shell: cmd
      run: '"C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"'
    - name: Check path
      run: $env:PATH
    - name: Run tests
      run: meson test --no-rebuild -C build --print-errorlogs
    - name: Show full log
      run: type build\meson-logs\testlog.txt
      if: ${{ always() }}
